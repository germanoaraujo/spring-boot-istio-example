syntax = "proto3";

package com.test;

import "google/rpc/status.proto";

option java_multiple_files = true;
option java_package = "com.test";
option java_outer_classname = "ProfanityFilterProtos";

// The BatchFilterRequest type defines a request to filter profanity out of one or more Content entries.
message BatchFilterRequest {
    // The filter configuration options.
    FilterConfig filter_config = 1;

    // The Content entries to be filtered.
    repeated Content content = 2;
}

// The BatchFilterResponse type defines the response to a BatchFilterRequest. It informs whether the request
// was successfully serviced or not, and contains one FilteredContent entry for each Content entry in
// the original request.
message BatchFilterResponse {
    // The response status.
    google.rpc.Status status = 1;

    // The filtered content.
    repeated FilteredContent filtered_content = 2;
}

// The FilterConfig type defines configuration options to be used when filtering profanity.
message FilterConfig {
    // A unique idenfitier for the context of the filtering, used when looking up the filter word list.
    string filter_id = 1;

    // A flag indicating if the original content must be included in response.
    bool include_original_content = 2;
}

// The Content type defines the input data used by the profanity filtering service.
message Content {
    // The textual content to be filtered.
    string original_text = 1;
}

// The FilteredContent type defines the output data returned by the filtering service.
message FilteredContent {
    // The original textual content to be filtered.
    string original_text = 1;

    // The filtered textual content, with profanity redacted from it.
    string filtered_text = 2;

    // A flag indicating whether the original content had profanity in it.
    bool has_profanity = 3;

    // An ID generated by the server for debugging purposes.
    string request_id = 4;
}

// The ProfanityFilter service handles requests to filter profanity out of textual input.
service ProfanityFilter {
    rpc BatchFilterContent (BatchFilterRequest) returns (BatchFilterResponse);
}
